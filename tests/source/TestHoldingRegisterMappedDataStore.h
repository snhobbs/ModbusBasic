
/*
 * Copyright 2021 ElectroOptical Innovations, LLC
 * TestHoldingRegisterMappedDataStore.h
 * Autogenerated file: 2021-01-05T13:49:42.930388
 */

#pragma once

#include <ArrayView/ArrayView.h>
#include <DataStores/DataStores.h>
#include <Utilities/TypeConversion.h>

#include <algorithm>
#include <array>
#include <cstdint>

struct HoldingRegisters {
  uint8_t str20[20]{};
  uint8_t str[4]{};
  uint32_t int16{};
  uint32_t int32{};
  uint64_t int641{};
  uint64_t int642{};
  uint64_t int643{};
  uint64_t int644{};
  uint64_t int645{};
  uint64_t int646{};
  uint64_t int647{};
  uint64_t int648{};
  uint64_t int649{};
  uint64_t int640{};
  uint64_t int6411{};
  uint64_t int6412{};
  uint64_t int6413{};
  uint64_t int6422{};
};

enum class HoldingRegistersEntryIdentifier {
  str20,
  str,
  int16,
  int32,
  int641,
  int642,
  int643,
  int644,
  int645,
  int646,
  int647,
  int648,
  int649,
  int640,
  int6411,
  int6412,
  int6413,
  int6422,
  unknown
};

class HoldingRegistersWrapper {
 public:
  static const constexpr std::size_t entries_ = 18;
  static const constexpr std::array<
      DataStores::StructEntry<HoldingRegistersEntryIdentifier>, entries_>
      entry_positions_{
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::str20,
              offsetof(HoldingRegisters, str20),
              sizeof(HoldingRegisters::str20)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::str,
              offsetof(HoldingRegisters, str), sizeof(HoldingRegisters::str)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int16,
              offsetof(HoldingRegisters, int16),
              sizeof(HoldingRegisters::int16)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int32,
              offsetof(HoldingRegisters, int32),
              sizeof(HoldingRegisters::int32)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int641,
              offsetof(HoldingRegisters, int641),
              sizeof(HoldingRegisters::int641)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int642,
              offsetof(HoldingRegisters, int642),
              sizeof(HoldingRegisters::int642)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int643,
              offsetof(HoldingRegisters, int643),
              sizeof(HoldingRegisters::int643)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int644,
              offsetof(HoldingRegisters, int644),
              sizeof(HoldingRegisters::int644)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int645,
              offsetof(HoldingRegisters, int645),
              sizeof(HoldingRegisters::int645)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int646,
              offsetof(HoldingRegisters, int646),
              sizeof(HoldingRegisters::int646)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int647,
              offsetof(HoldingRegisters, int647),
              sizeof(HoldingRegisters::int647)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int648,
              offsetof(HoldingRegisters, int648),
              sizeof(HoldingRegisters::int648)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int649,
              offsetof(HoldingRegisters, int649),
              sizeof(HoldingRegisters::int649)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int640,
              offsetof(HoldingRegisters, int640),
              sizeof(HoldingRegisters::int640)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int6411,
              offsetof(HoldingRegisters, int6411),
              sizeof(HoldingRegisters::int6411)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int6412,
              offsetof(HoldingRegisters, int6412),
              sizeof(HoldingRegisters::int6412)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int6413,
              offsetof(HoldingRegisters, int6413),
              sizeof(HoldingRegisters::int6413)},
          DataStores::StructEntry<HoldingRegistersEntryIdentifier>{
              HoldingRegistersEntryIdentifier::int6422,
              offsetof(HoldingRegisters, int6422),
              sizeof(HoldingRegisters::int6422)},
      };

 private:
  HoldingRegisters* data_bank_{};

 public:
  explicit HoldingRegistersWrapper(HoldingRegisters* data_bank)
      : data_bank_{data_bank} {}
  static const constexpr std::size_t size() { return sizeof(HoldingRegisters); }

  void SetField(const std::size_t index, const uint8_t* data,
                const std::size_t size) {
    const HoldingRegistersEntryIdentifier identifier =
        static_cast<HoldingRegistersEntryIdentifier>(index);
    switch (identifier) {
      case (HoldingRegistersEntryIdentifier::unknown): {
        // Ignore this case, should be scrubed
        break;
      }
      case (HoldingRegistersEntryIdentifier::str20): {
        for (std::size_t i = 0; i < std::min(sizeof(data_bank_->str20), size);
             i++) {
          data_bank_->str20[i] = data[i];
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::str): {
        for (std::size_t i = 0; i < std::min(sizeof(data_bank_->str), size);
             i++) {
          data_bank_->str[i] = data[i];
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int16): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(data,
                                                                        size);
        data_bank_->int16 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int32): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(data,
                                                                        size);
        data_bank_->int32 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int641): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int641 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int642): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int642 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int643): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int643 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int644): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int644 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int645): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int645 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int646): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int646 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int647): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int647 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int648): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int648 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int649): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int649 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int640): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int640 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int6411): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int6411 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int6412): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int6412 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int6413): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int6413 = value;

        break;
      }
      case (HoldingRegistersEntryIdentifier::int6422): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint64_t, uint8_t>(data,
                                                                        size);
        data_bank_->int6422 = value;

        break;
      }
      default:
        break;
    }
  }

  void GetField(const std::size_t index, uint8_t* data,
                const std::size_t size) const {
    const HoldingRegistersEntryIdentifier identifier =
        static_cast<HoldingRegistersEntryIdentifier>(index);
    switch (identifier) {
      case (HoldingRegistersEntryIdentifier::unknown): {
        // Ignore this case, should be scrubed
        break;
      }
      case (HoldingRegistersEntryIdentifier::str20): {
        for (std::size_t i = 0; i < std::min(sizeof(data_bank_->str20), size);
             i++) {
          data[i] = data_bank_->str20[i];
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::str): {
        for (std::size_t i = 0; i < std::min(sizeof(data_bank_->str), size);
             i++) {
          data[i] = data_bank_->str[i];
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int16): {
        const auto value = data_bank_->int16;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int32): {
        const auto value = data_bank_->int32;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int641): {
        const auto value = data_bank_->int641;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int642): {
        const auto value = data_bank_->int642;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int643): {
        const auto value = data_bank_->int643;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int644): {
        const auto value = data_bank_->int644;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int645): {
        const auto value = data_bank_->int645;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int646): {
        const auto value = data_bank_->int646;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int647): {
        const auto value = data_bank_->int647;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int648): {
        const auto value = data_bank_->int648;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int649): {
        const auto value = data_bank_->int649;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int640): {
        const auto value = data_bank_->int640;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int6411): {
        const auto value = data_bank_->int6411;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int6412): {
        const auto value = data_bank_->int6412;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int6413): {
        const auto value = data_bank_->int6413;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (HoldingRegistersEntryIdentifier::int6422): {
        const auto value = data_bank_->int6422;
        const auto array = Utilities::MakeMSBU8Array<uint64_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      default:
        break;
    }
  }
  ArrayView<const uint8_t> get_str20(void) const {
    return ArrayView<const uint8_t>{20, data_bank_->str20};
  }
  void set_str20(const uint8_t* const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->str20[i] = value[i];
    }
  }
  ArrayView<const uint8_t> get_str(void) const {
    return ArrayView<const uint8_t>{4, data_bank_->str};
  }
  void set_str(const uint8_t* const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->str[i] = value[i];
    }
  }
  uint32_t get_int16(void) const { return data_bank_->int16; }
  void set_int16(uint32_t value) { data_bank_->int16 = value; }
  uint32_t get_int32(void) const { return data_bank_->int32; }
  void set_int32(uint32_t value) { data_bank_->int32 = value; }
  uint64_t get_int641(void) const { return data_bank_->int641; }
  void set_int641(uint64_t value) { data_bank_->int641 = value; }
  uint64_t get_int642(void) const { return data_bank_->int642; }
  void set_int642(uint64_t value) { data_bank_->int642 = value; }
  uint64_t get_int643(void) const { return data_bank_->int643; }
  void set_int643(uint64_t value) { data_bank_->int643 = value; }
  uint64_t get_int644(void) const { return data_bank_->int644; }
  void set_int644(uint64_t value) { data_bank_->int644 = value; }
  uint64_t get_int645(void) const { return data_bank_->int645; }
  void set_int645(uint64_t value) { data_bank_->int645 = value; }
  uint64_t get_int646(void) const { return data_bank_->int646; }
  void set_int646(uint64_t value) { data_bank_->int646 = value; }
  uint64_t get_int647(void) const { return data_bank_->int647; }
  void set_int647(uint64_t value) { data_bank_->int647 = value; }
  uint64_t get_int648(void) const { return data_bank_->int648; }
  void set_int648(uint64_t value) { data_bank_->int648 = value; }
  uint64_t get_int649(void) const { return data_bank_->int649; }
  void set_int649(uint64_t value) { data_bank_->int649 = value; }
  uint64_t get_int640(void) const { return data_bank_->int640; }
  void set_int640(uint64_t value) { data_bank_->int640 = value; }
  uint64_t get_int6411(void) const { return data_bank_->int6411; }
  void set_int6411(uint64_t value) { data_bank_->int6411 = value; }
  uint64_t get_int6412(void) const { return data_bank_->int6412; }
  void set_int6412(uint64_t value) { data_bank_->int6412 = value; }
  uint64_t get_int6413(void) const { return data_bank_->int6413; }
  void set_int6413(uint64_t value) { data_bank_->int6413 = value; }
  uint64_t get_int6422(void) const { return data_bank_->int6422; }
  void set_int6422(uint64_t value) { data_bank_->int6422 = value; }
};  // class HoldingRegistersWrapper