
/*
 * Copyright 2022 ElectroOptical Innovations, LLC
 *
 * Autogenerated file: 2022-10-15
C++
  - Use a namespace with namespaces.
  - Generate enums for each entry
  - Generate list of offsets indexed by enum value, iterate over these for the
start and end
  - Generate list of names indexed by enum
  - Offset to enum switch statement
  - Data is stored in namespace
  - Switch statement for read and write data to byte arrays
 */

#pragma once
#include <algorithm>
#include <array>
#include <cstdint>
#include <string>

#include "ModbusEntry.h"

const inline std::array<ModbusEntry, 36> modbus_entries{
    ModbusEntry{"str20", "string", 2, 20, 10, "input register"},
    ModbusEntry{"str", "string", 12, 4, 2, "input register"},
    ModbusEntry{"int16", "uint32_t", 14, 1, 2, "input register"},
    ModbusEntry{"int32", "uint32_t", 16, 1, 2, "input register"},
    ModbusEntry{"int641", "uint64_t", 18, 1, 4, "input register"},
    ModbusEntry{"int642", "uint64_t", 22, 1, 4, "input register"},
    ModbusEntry{"int643", "uint64_t", 26, 1, 4, "input register"},
    ModbusEntry{"int644", "uint64_t", 30, 1, 4, "input register"},
    ModbusEntry{"int645", "uint64_t", 34, 1, 4, "input register"},
    ModbusEntry{"int646", "uint64_t", 38, 1, 4, "input register"},
    ModbusEntry{"int647", "uint64_t", 42, 1, 4, "input register"},
    ModbusEntry{"int648", "uint64_t", 46, 1, 4, "input register"},
    ModbusEntry{"int649", "uint64_t", 50, 1, 4, "input register"},
    ModbusEntry{"int640", "uint64_t", 54, 1, 4, "input register"},
    ModbusEntry{"int6411", "uint64_t", 58, 1, 4, "input register"},
    ModbusEntry{"int6412", "uint64_t", 62, 1, 4, "input register"},
    ModbusEntry{"int6413", "uint64_t", 66, 1, 4, "input register"},
    ModbusEntry{"int6422", "uint64_t", 70, 1, 4, "input register"},
    ModbusEntry{"str20", "string", 2, 20, 10, "holding register"},
    ModbusEntry{"str", "string", 12, 4, 2, "holding register"},
    ModbusEntry{"int16", "uint32_t", 14, 1, 2, "holding register"},
    ModbusEntry{"int32", "uint32_t", 16, 1, 2, "holding register"},
    ModbusEntry{"int641", "uint64_t", 18, 1, 4, "holding register"},
    ModbusEntry{"int642", "uint64_t", 22, 1, 4, "holding register"},
    ModbusEntry{"int643", "uint64_t", 26, 1, 4, "holding register"},
    ModbusEntry{"int644", "uint64_t", 30, 1, 4, "holding register"},
    ModbusEntry{"int645", "uint64_t", 34, 1, 4, "holding register"},
    ModbusEntry{"int646", "uint64_t", 38, 1, 4, "holding register"},
    ModbusEntry{"int647", "uint64_t", 42, 1, 4, "holding register"},
    ModbusEntry{"int648", "uint64_t", 46, 1, 4, "holding register"},
    ModbusEntry{"int649", "uint64_t", 50, 1, 4, "holding register"},
    ModbusEntry{"int640", "uint64_t", 54, 1, 4, "holding register"},
    ModbusEntry{"int6411", "uint64_t", 58, 1, 4, "holding register"},
    ModbusEntry{"int6412", "uint64_t", 62, 1, 4, "holding register"},
    ModbusEntry{"int6413", "uint64_t", 66, 1, 4, "holding register"},
    ModbusEntry{"int6422", "uint64_t", 70, 1, 4, "holding register"},

};
