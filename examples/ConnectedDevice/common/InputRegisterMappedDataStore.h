
/*
 * Copyright 2021 ElectroOptical Innovations, LLC
 * InputRegisterMappedDataStore.h
 * Autogenerated file: 2021-01-05T13:59:22.641970
 */

#pragma once

#include <ArrayView/ArrayView.h>
#include <DataStores/DataStores.h>
#include <Utilities/TypeConversion.h>

#include <algorithm>
#include <array>
#include <cstdint>

struct InputRegisters {
  uint8_t version[64]{};
  uint8_t firmware_version[64]{};
  uint8_t compile_date[64]{};
  uint8_t compile_time[64]{};
  uint8_t serial_number[40]{};
  uint16_t fault_status{};
  int32_t p5_micro_volts{};
  uint32_t p5_reading{};
  int32_t p23_micro_volts{};
  uint32_t p23_reading{};
  int32_t vlo_micro_volts{};
  uint32_t vlo_reading{};
  int32_t thermistor_temp_spi{};
  int32_t thermistor_temp_mcu{};
  uint32_t data_frequency{};
  int32_t p3_3_micro_volts{};
  uint32_t p3_3_reading{};
};

enum class InputRegistersEntryIdentifier {
  version,
  firmware_version,
  compile_date,
  compile_time,
  serial_number,
  fault_status,
  p5_micro_volts,
  p5_reading,
  p23_micro_volts,
  p23_reading,
  vlo_micro_volts,
  vlo_reading,
  thermistor_temp_spi,
  thermistor_temp_mcu,
  data_frequency,
  p3_3_micro_volts,
  p3_3_reading,
  unknown
};

class InputRegistersWrapper {
 public:
  static const constexpr std::size_t entries_ = 17;
  static const constexpr std::array<
      DataStores::StructEntry<InputRegistersEntryIdentifier>, entries_>
      entry_positions_{
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::version,
              offsetof(InputRegisters, version),
              sizeof(InputRegisters::version)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::firmware_version,
              offsetof(InputRegisters, firmware_version),
              sizeof(InputRegisters::firmware_version)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::compile_date,
              offsetof(InputRegisters, compile_date),
              sizeof(InputRegisters::compile_date)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::compile_time,
              offsetof(InputRegisters, compile_time),
              sizeof(InputRegisters::compile_time)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::serial_number,
              offsetof(InputRegisters, serial_number),
              sizeof(InputRegisters::serial_number)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::fault_status,
              offsetof(InputRegisters, fault_status),
              sizeof(InputRegisters::fault_status)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::p5_micro_volts,
              offsetof(InputRegisters, p5_micro_volts),
              sizeof(InputRegisters::p5_micro_volts)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::p5_reading,
              offsetof(InputRegisters, p5_reading),
              sizeof(InputRegisters::p5_reading)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::p23_micro_volts,
              offsetof(InputRegisters, p23_micro_volts),
              sizeof(InputRegisters::p23_micro_volts)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::p23_reading,
              offsetof(InputRegisters, p23_reading),
              sizeof(InputRegisters::p23_reading)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::vlo_micro_volts,
              offsetof(InputRegisters, vlo_micro_volts),
              sizeof(InputRegisters::vlo_micro_volts)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::vlo_reading,
              offsetof(InputRegisters, vlo_reading),
              sizeof(InputRegisters::vlo_reading)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::thermistor_temp_spi,
              offsetof(InputRegisters, thermistor_temp_spi),
              sizeof(InputRegisters::thermistor_temp_spi)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::thermistor_temp_mcu,
              offsetof(InputRegisters, thermistor_temp_mcu),
              sizeof(InputRegisters::thermistor_temp_mcu)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::data_frequency,
              offsetof(InputRegisters, data_frequency),
              sizeof(InputRegisters::data_frequency)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::p3_3_micro_volts,
              offsetof(InputRegisters, p3_3_micro_volts),
              sizeof(InputRegisters::p3_3_micro_volts)},
          DataStores::StructEntry<InputRegistersEntryIdentifier>{
              InputRegistersEntryIdentifier::p3_3_reading,
              offsetof(InputRegisters, p3_3_reading),
              sizeof(InputRegisters::p3_3_reading)},
      };

 private:
  InputRegisters *data_bank_{};

 public:
  explicit InputRegistersWrapper(InputRegisters *data_bank)
      : data_bank_{data_bank} {}
  static const constexpr std::size_t size() { return sizeof(InputRegisters); }

  void SetField(const std::size_t index, const uint8_t *data,
                const std::size_t size) {
    const InputRegistersEntryIdentifier identifier =
        static_cast<InputRegistersEntryIdentifier>(index);
    switch (identifier) {
      case (InputRegistersEntryIdentifier::unknown): {
        // Ignore this case, should be scrubed
        break;
      }
      case (InputRegistersEntryIdentifier::version): {
        for (std::size_t i = 0; i < std::min(sizeof(data_bank_->version), size);
             i++) {
          data_bank_->version[i] = data[i];
        }

        break;
      }
      case (InputRegistersEntryIdentifier::firmware_version): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->firmware_version), size); i++) {
          data_bank_->firmware_version[i] = data[i];
        }

        break;
      }
      case (InputRegistersEntryIdentifier::compile_date): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->compile_date), size); i++) {
          data_bank_->compile_date[i] = data[i];
        }

        break;
      }
      case (InputRegistersEntryIdentifier::compile_time): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->compile_time), size); i++) {
          data_bank_->compile_time[i] = data[i];
        }

        break;
      }
      case (InputRegistersEntryIdentifier::serial_number): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->serial_number), size); i++) {
          data_bank_->serial_number[i] = data[i];
        }

        break;
      }
      case (InputRegistersEntryIdentifier::fault_status): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint16_t, uint8_t>(data,
                                                                        size);
        data_bank_->fault_status = value;

        break;
      }
      case (InputRegistersEntryIdentifier::p5_micro_volts): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(data,
                                                                       size);
        data_bank_->p5_micro_volts = value;

        break;
      }
      case (InputRegistersEntryIdentifier::p5_reading): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(data,
                                                                        size);
        data_bank_->p5_reading = value;

        break;
      }
      case (InputRegistersEntryIdentifier::p23_micro_volts): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(data,
                                                                       size);
        data_bank_->p23_micro_volts = value;

        break;
      }
      case (InputRegistersEntryIdentifier::p23_reading): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(data,
                                                                        size);
        data_bank_->p23_reading = value;

        break;
      }
      case (InputRegistersEntryIdentifier::vlo_micro_volts): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(data,
                                                                       size);
        data_bank_->vlo_micro_volts = value;

        break;
      }
      case (InputRegistersEntryIdentifier::vlo_reading): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(data,
                                                                        size);
        data_bank_->vlo_reading = value;

        break;
      }
      case (InputRegistersEntryIdentifier::thermistor_temp_spi): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(data,
                                                                       size);
        data_bank_->thermistor_temp_spi = value;

        break;
      }
      case (InputRegistersEntryIdentifier::thermistor_temp_mcu): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(data,
                                                                       size);
        data_bank_->thermistor_temp_mcu = value;

        break;
      }
      case (InputRegistersEntryIdentifier::data_frequency): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(data,
                                                                        size);
        data_bank_->data_frequency = value;

        break;
      }
      case (InputRegistersEntryIdentifier::p3_3_micro_volts): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(data,
                                                                       size);
        data_bank_->p3_3_micro_volts = value;

        break;
      }
      case (InputRegistersEntryIdentifier::p3_3_reading): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(data,
                                                                        size);
        data_bank_->p3_3_reading = value;

        break;
      }
      default:
        break;
    }
  }

  void GetField(const std::size_t index, uint8_t *data,
                const std::size_t size) const {
    const InputRegistersEntryIdentifier identifier =
        static_cast<InputRegistersEntryIdentifier>(index);
    switch (identifier) {
      case (InputRegistersEntryIdentifier::unknown): {
        // Ignore this case, should be scrubed
        break;
      }
      case (InputRegistersEntryIdentifier::version): {
        for (std::size_t i = 0; i < std::min(sizeof(data_bank_->version), size);
             i++) {
          data[i] = data_bank_->version[i];
        }

        break;
      }
      case (InputRegistersEntryIdentifier::firmware_version): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->firmware_version), size); i++) {
          data[i] = data_bank_->firmware_version[i];
        }

        break;
      }
      case (InputRegistersEntryIdentifier::compile_date): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->compile_date), size); i++) {
          data[i] = data_bank_->compile_date[i];
        }

        break;
      }
      case (InputRegistersEntryIdentifier::compile_time): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->compile_time), size); i++) {
          data[i] = data_bank_->compile_time[i];
        }

        break;
      }
      case (InputRegistersEntryIdentifier::serial_number): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->serial_number), size); i++) {
          data[i] = data_bank_->serial_number[i];
        }

        break;
      }
      case (InputRegistersEntryIdentifier::fault_status): {
        const auto value = data_bank_->fault_status;
        const auto array = Utilities::MakeMSBU8Array<uint16_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (InputRegistersEntryIdentifier::p5_micro_volts): {
        const auto value = data_bank_->p5_micro_volts;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (InputRegistersEntryIdentifier::p5_reading): {
        const auto value = data_bank_->p5_reading;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (InputRegistersEntryIdentifier::p23_micro_volts): {
        const auto value = data_bank_->p23_micro_volts;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (InputRegistersEntryIdentifier::p23_reading): {
        const auto value = data_bank_->p23_reading;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (InputRegistersEntryIdentifier::vlo_micro_volts): {
        const auto value = data_bank_->vlo_micro_volts;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (InputRegistersEntryIdentifier::vlo_reading): {
        const auto value = data_bank_->vlo_reading;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (InputRegistersEntryIdentifier::thermistor_temp_spi): {
        const auto value = data_bank_->thermistor_temp_spi;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (InputRegistersEntryIdentifier::thermistor_temp_mcu): {
        const auto value = data_bank_->thermistor_temp_mcu;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (InputRegistersEntryIdentifier::data_frequency): {
        const auto value = data_bank_->data_frequency;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (InputRegistersEntryIdentifier::p3_3_micro_volts): {
        const auto value = data_bank_->p3_3_micro_volts;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      case (InputRegistersEntryIdentifier::p3_3_reading): {
        const auto value = data_bank_->p3_3_reading;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), size); i++) {
          data[i] = array.at(i);
        }

        break;
      }
      default:
        break;
    }
  }
  ArrayView<const uint8_t> get_version(void) const {
    return ArrayView<const uint8_t>{64, data_bank_->version};
  }
  void set_version(const uint8_t *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->version[i] = value[i];
    }
  }
  ArrayView<const uint8_t> get_firmware_version(void) const {
    return ArrayView<const uint8_t>{64, data_bank_->firmware_version};
  }
  void set_firmware_version(const uint8_t *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->firmware_version[i] = value[i];
    }
  }
  ArrayView<const uint8_t> get_compile_date(void) const {
    return ArrayView<const uint8_t>{64, data_bank_->compile_date};
  }
  void set_compile_date(const uint8_t *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->compile_date[i] = value[i];
    }
  }
  ArrayView<const uint8_t> get_compile_time(void) const {
    return ArrayView<const uint8_t>{64, data_bank_->compile_time};
  }
  void set_compile_time(const uint8_t *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->compile_time[i] = value[i];
    }
  }
  ArrayView<const uint8_t> get_serial_number(void) const {
    return ArrayView<const uint8_t>{40, data_bank_->serial_number};
  }
  void set_serial_number(const uint8_t *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->serial_number[i] = value[i];
    }
  }
  uint16_t get_fault_status(void) const { return data_bank_->fault_status; }
  void set_fault_status(uint16_t value) { data_bank_->fault_status = value; }
  int32_t get_p5_micro_volts(void) const { return data_bank_->p5_micro_volts; }
  void set_p5_micro_volts(int32_t value) { data_bank_->p5_micro_volts = value; }
  uint32_t get_p5_reading(void) const { return data_bank_->p5_reading; }
  void set_p5_reading(uint32_t value) { data_bank_->p5_reading = value; }
  int32_t get_p23_micro_volts(void) const {
    return data_bank_->p23_micro_volts;
  }
  void set_p23_micro_volts(int32_t value) {
    data_bank_->p23_micro_volts = value;
  }
  uint32_t get_p23_reading(void) const { return data_bank_->p23_reading; }
  void set_p23_reading(uint32_t value) { data_bank_->p23_reading = value; }
  int32_t get_vlo_micro_volts(void) const {
    return data_bank_->vlo_micro_volts;
  }
  void set_vlo_micro_volts(int32_t value) {
    data_bank_->vlo_micro_volts = value;
  }
  uint32_t get_vlo_reading(void) const { return data_bank_->vlo_reading; }
  void set_vlo_reading(uint32_t value) { data_bank_->vlo_reading = value; }
  int32_t get_thermistor_temp_spi(void) const {
    return data_bank_->thermistor_temp_spi;
  }
  void set_thermistor_temp_spi(int32_t value) {
    data_bank_->thermistor_temp_spi = value;
  }
  int32_t get_thermistor_temp_mcu(void) const {
    return data_bank_->thermistor_temp_mcu;
  }
  void set_thermistor_temp_mcu(int32_t value) {
    data_bank_->thermistor_temp_mcu = value;
  }
  uint32_t get_data_frequency(void) const { return data_bank_->data_frequency; }
  void set_data_frequency(uint32_t value) {
    data_bank_->data_frequency = value;
  }
  int32_t get_p3_3_micro_volts(void) const {
    return data_bank_->p3_3_micro_volts;
  }
  void set_p3_3_micro_volts(int32_t value) {
    data_bank_->p3_3_micro_volts = value;
  }
  uint32_t get_p3_3_reading(void) const { return data_bank_->p3_3_reading; }
  void set_p3_3_reading(uint32_t value) { data_bank_->p3_3_reading = value; }
};  // class InputRegistersWrapper
