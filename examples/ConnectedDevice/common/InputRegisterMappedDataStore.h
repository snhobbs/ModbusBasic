
/*
 * Copyright 2021 ElectroOptical Innovations, LLC
 * InputRegisterMappedDataStore.h
 * Autogenerated file: 2021-01-02T16:22:20.354518
 */

#pragma once

#include <Modbus/DataStore.h>
#include <Modbus/MappedRegisterDataStore.h>

#include <algorithm>
#include <array>
#include <cstdint>

namespace InputRegisters {
struct MemoryMap {
  uint8_t version[64];
  uint8_t firmware_version[64];
  uint8_t compile_date[64];
  uint8_t compile_time[64];
  uint8_t serial_number[40];
  uint16_t fault_status;
  int32_t p5_micro_volts;
  uint32_t p5_reading;
  int32_t p23_micro_volts;
  uint32_t p23_reading;
  int32_t vlo_micro_volts;
  uint32_t vlo_reading;
  int32_t thermistor_temp_spi;
  int32_t thermistor_temp_mcu;
  uint32_t data_frequency;
  int32_t p3_3_micro_volts;
  uint32_t p3_3_reading;
};

enum class MemoryMapEntryIdentifier {
  version,
  firmware_version,
  compile_date,
  compile_time,
  serial_number,
  fault_status,
  p5_micro_volts,
  p5_reading,
  p23_micro_volts,
  p23_reading,
  vlo_micro_volts,
  vlo_reading,
  thermistor_temp_spi,
  thermistor_temp_mcu,
  data_frequency,
  p3_3_micro_volts,
  p3_3_reading,
  unknown
};

using MapEntry = Modbus::MemoryMapEntry<MemoryMapEntryIdentifier>;
class MemoryMapController {
 public:
  static const constexpr std::size_t map_entry_count_ = 17;
  static const constexpr std::array<MapEntry, map_entry_count_> memory_entries_{
      MapEntry{MemoryMapEntryIdentifier::version, offsetof(MemoryMap, version),
               sizeof(MemoryMap::version)},
      MapEntry{MemoryMapEntryIdentifier::firmware_version,
               offsetof(MemoryMap, firmware_version),
               sizeof(MemoryMap::firmware_version)},
      MapEntry{MemoryMapEntryIdentifier::compile_date,
               offsetof(MemoryMap, compile_date),
               sizeof(MemoryMap::compile_date)},
      MapEntry{MemoryMapEntryIdentifier::compile_time,
               offsetof(MemoryMap, compile_time),
               sizeof(MemoryMap::compile_time)},
      MapEntry{MemoryMapEntryIdentifier::serial_number,
               offsetof(MemoryMap, serial_number),
               sizeof(MemoryMap::serial_number)},
      MapEntry{MemoryMapEntryIdentifier::fault_status,
               offsetof(MemoryMap, fault_status),
               sizeof(MemoryMap::fault_status)},
      MapEntry{MemoryMapEntryIdentifier::p5_micro_volts,
               offsetof(MemoryMap, p5_micro_volts),
               sizeof(MemoryMap::p5_micro_volts)},
      MapEntry{MemoryMapEntryIdentifier::p5_reading,
               offsetof(MemoryMap, p5_reading), sizeof(MemoryMap::p5_reading)},
      MapEntry{MemoryMapEntryIdentifier::p23_micro_volts,
               offsetof(MemoryMap, p23_micro_volts),
               sizeof(MemoryMap::p23_micro_volts)},
      MapEntry{MemoryMapEntryIdentifier::p23_reading,
               offsetof(MemoryMap, p23_reading),
               sizeof(MemoryMap::p23_reading)},
      MapEntry{MemoryMapEntryIdentifier::vlo_micro_volts,
               offsetof(MemoryMap, vlo_micro_volts),
               sizeof(MemoryMap::vlo_micro_volts)},
      MapEntry{MemoryMapEntryIdentifier::vlo_reading,
               offsetof(MemoryMap, vlo_reading),
               sizeof(MemoryMap::vlo_reading)},
      MapEntry{MemoryMapEntryIdentifier::thermistor_temp_spi,
               offsetof(MemoryMap, thermistor_temp_spi),
               sizeof(MemoryMap::thermistor_temp_spi)},
      MapEntry{MemoryMapEntryIdentifier::thermistor_temp_mcu,
               offsetof(MemoryMap, thermistor_temp_mcu),
               sizeof(MemoryMap::thermistor_temp_mcu)},
      MapEntry{MemoryMapEntryIdentifier::data_frequency,
               offsetof(MemoryMap, data_frequency),
               sizeof(MemoryMap::data_frequency)},
      MapEntry{MemoryMapEntryIdentifier::p3_3_micro_volts,
               offsetof(MemoryMap, p3_3_micro_volts),
               sizeof(MemoryMap::p3_3_micro_volts)},
      MapEntry{MemoryMapEntryIdentifier::p3_3_reading,
               offsetof(MemoryMap, p3_3_reading),
               sizeof(MemoryMap::p3_3_reading)},
  };

 private:
  MemoryMap *data_bank_{};

 public:
  explicit MemoryMapController(MemoryMap *data_bank) : data_bank_{data_bank} {}
  static const constexpr std::size_t size() { return sizeof(MemoryMap); }

  void SetField(const std::size_t index,
                const ArrayView<const uint8_t> &data_view) {
    const MemoryMapEntryIdentifier identifier =
        static_cast<MemoryMapEntryIdentifier>(index);
    switch (identifier) {
      case (MemoryMapEntryIdentifier::unknown): {
        // Ignore this case, should be scrubed
        break;
      }
      case (MemoryMapEntryIdentifier::version): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->version), data_view.size()); i++) {
          data_bank_->version[i] = data_view.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::firmware_version): {
        for (std::size_t i = 0;
             i <
             std::min(sizeof(data_bank_->firmware_version), data_view.size());
             i++) {
          data_bank_->firmware_version[i] = data_view.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::compile_date): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->compile_date), data_view.size());
             i++) {
          data_bank_->compile_date[i] = data_view.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::compile_time): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->compile_time), data_view.size());
             i++) {
          data_bank_->compile_time[i] = data_view.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::serial_number): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->serial_number), data_view.size());
             i++) {
          data_bank_->serial_number[i] = data_view.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::fault_status): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint16_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->fault_status = value;

        break;
      }
      case (MemoryMapEntryIdentifier::p5_micro_volts): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->p5_micro_volts = value;

        break;
      }
      case (MemoryMapEntryIdentifier::p5_reading): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->p5_reading = value;

        break;
      }
      case (MemoryMapEntryIdentifier::p23_micro_volts): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->p23_micro_volts = value;

        break;
      }
      case (MemoryMapEntryIdentifier::p23_reading): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->p23_reading = value;

        break;
      }
      case (MemoryMapEntryIdentifier::vlo_micro_volts): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->vlo_micro_volts = value;

        break;
      }
      case (MemoryMapEntryIdentifier::vlo_reading): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->vlo_reading = value;

        break;
      }
      case (MemoryMapEntryIdentifier::thermistor_temp_spi): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->thermistor_temp_spi = value;

        break;
      }
      case (MemoryMapEntryIdentifier::thermistor_temp_mcu): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->thermistor_temp_mcu = value;

        break;
      }
      case (MemoryMapEntryIdentifier::data_frequency): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->data_frequency = value;

        break;
      }
      case (MemoryMapEntryIdentifier::p3_3_micro_volts): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<int32_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->p3_3_micro_volts = value;

        break;
      }
      case (MemoryMapEntryIdentifier::p3_3_reading): {
        const auto value =
            Utilities::Make_MSB_IntegerTypeFromArray<uint32_t, uint8_t>(
                data_view.data(), data_view.size());
        data_bank_->p3_3_reading = value;

        break;
      }
      default:
        break;
    }
  }

  void GetField(const std::size_t index, ArrayView<uint8_t> *data_view) const {
    const MemoryMapEntryIdentifier identifier =
        static_cast<MemoryMapEntryIdentifier>(index);
    switch (identifier) {
      case (MemoryMapEntryIdentifier::unknown): {
        // Ignore this case, should be scrubed
        break;
      }
      case (MemoryMapEntryIdentifier::version): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->version), data_view->size());
             i++) {
          data_view->at(i) = data_bank_->version[i];
        }

        break;
      }
      case (MemoryMapEntryIdentifier::firmware_version): {
        for (std::size_t i = 0;
             i <
             std::min(sizeof(data_bank_->firmware_version), data_view->size());
             i++) {
          data_view->at(i) = data_bank_->firmware_version[i];
        }

        break;
      }
      case (MemoryMapEntryIdentifier::compile_date): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->compile_date), data_view->size());
             i++) {
          data_view->at(i) = data_bank_->compile_date[i];
        }

        break;
      }
      case (MemoryMapEntryIdentifier::compile_time): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->compile_time), data_view->size());
             i++) {
          data_view->at(i) = data_bank_->compile_time[i];
        }

        break;
      }
      case (MemoryMapEntryIdentifier::serial_number): {
        for (std::size_t i = 0;
             i < std::min(sizeof(data_bank_->serial_number), data_view->size());
             i++) {
          data_view->at(i) = data_bank_->serial_number[i];
        }

        break;
      }
      case (MemoryMapEntryIdentifier::fault_status): {
        const auto value = data_bank_->fault_status;
        const auto array = Utilities::MakeMSBU8Array<uint16_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::p5_micro_volts): {
        const auto value = data_bank_->p5_micro_volts;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::p5_reading): {
        const auto value = data_bank_->p5_reading;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::p23_micro_volts): {
        const auto value = data_bank_->p23_micro_volts;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::p23_reading): {
        const auto value = data_bank_->p23_reading;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::vlo_micro_volts): {
        const auto value = data_bank_->vlo_micro_volts;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::vlo_reading): {
        const auto value = data_bank_->vlo_reading;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::thermistor_temp_spi): {
        const auto value = data_bank_->thermistor_temp_spi;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::thermistor_temp_mcu): {
        const auto value = data_bank_->thermistor_temp_mcu;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::data_frequency): {
        const auto value = data_bank_->data_frequency;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::p3_3_micro_volts): {
        const auto value = data_bank_->p3_3_micro_volts;
        const auto array = Utilities::MakeMSBU8Array<int32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      case (MemoryMapEntryIdentifier::p3_3_reading): {
        const auto value = data_bank_->p3_3_reading;
        const auto array = Utilities::MakeMSBU8Array<uint32_t>(value);
        for (std::size_t i = 0; i < std::min(array.size(), data_view->size());
             i++) {
          data_view->at(i) = array.at(i);
        }

        break;
      }
      default:
        break;
    }
  }
  ArrayView<const uint8_t> get_version(void) const {
    return ArrayView<const uint8_t>{64, data_bank_->version};
  }
  void set_version(const uint8_t *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->version[i] = value[i];
    }
  }
  ArrayView<const uint8_t> get_firmware_version(void) const {
    return ArrayView<const uint8_t>{64, data_bank_->firmware_version};
  }
  void set_firmware_version(const uint8_t *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->firmware_version[i] = value[i];
    }
  }
  ArrayView<const uint8_t> get_compile_date(void) const {
    return ArrayView<const uint8_t>{64, data_bank_->compile_date};
  }
  void set_compile_date(const uint8_t *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->compile_date[i] = value[i];
    }
  }
  ArrayView<const uint8_t> get_compile_time(void) const {
    return ArrayView<const uint8_t>{64, data_bank_->compile_time};
  }
  void set_compile_time(const uint8_t *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->compile_time[i] = value[i];
    }
  }
  ArrayView<const uint8_t> get_serial_number(void) const {
    return ArrayView<const uint8_t>{40, data_bank_->serial_number};
  }
  void set_serial_number(const uint8_t *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->serial_number[i] = value[i];
    }
  }
  uint16_t get_fault_status(void) const { return data_bank_->fault_status; }
  void set_fault_status(uint16_t value) { data_bank_->fault_status = value; }
  int32_t get_p5_micro_volts(void) const { return data_bank_->p5_micro_volts; }
  void set_p5_micro_volts(int32_t value) { data_bank_->p5_micro_volts = value; }
  uint32_t get_p5_reading(void) const { return data_bank_->p5_reading; }
  void set_p5_reading(uint32_t value) { data_bank_->p5_reading = value; }
  int32_t get_p23_micro_volts(void) const {
    return data_bank_->p23_micro_volts;
  }
  void set_p23_micro_volts(int32_t value) {
    data_bank_->p23_micro_volts = value;
  }
  uint32_t get_p23_reading(void) const { return data_bank_->p23_reading; }
  void set_p23_reading(uint32_t value) { data_bank_->p23_reading = value; }
  int32_t get_vlo_micro_volts(void) const {
    return data_bank_->vlo_micro_volts;
  }
  void set_vlo_micro_volts(int32_t value) {
    data_bank_->vlo_micro_volts = value;
  }
  uint32_t get_vlo_reading(void) const { return data_bank_->vlo_reading; }
  void set_vlo_reading(uint32_t value) { data_bank_->vlo_reading = value; }
  int32_t get_thermistor_temp_spi(void) const {
    return data_bank_->thermistor_temp_spi;
  }
  void set_thermistor_temp_spi(int32_t value) {
    data_bank_->thermistor_temp_spi = value;
  }
  int32_t get_thermistor_temp_mcu(void) const {
    return data_bank_->thermistor_temp_mcu;
  }
  void set_thermistor_temp_mcu(int32_t value) {
    data_bank_->thermistor_temp_mcu = value;
  }
  uint32_t get_data_frequency(void) const { return data_bank_->data_frequency; }
  void set_data_frequency(uint32_t value) {
    data_bank_->data_frequency = value;
  }
  int32_t get_p3_3_micro_volts(void) const {
    return data_bank_->p3_3_micro_volts;
  }
  void set_p3_3_micro_volts(int32_t value) {
    data_bank_->p3_3_micro_volts = value;
  }
  uint32_t get_p3_3_reading(void) const { return data_bank_->p3_3_reading; }
  void set_p3_3_reading(uint32_t value) { data_bank_->p3_3_reading = value; }
};  // class MemoryMapController
}  // namespace InputRegisters
